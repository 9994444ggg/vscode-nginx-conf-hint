[
  {
    "name": "$upstream_addr",
    "desc": "keeps the IP address and port,\nor the path to the UNIX-domain socket of the upstream server (1.11.4).\nIf several servers were contacted during proxying,\ntheir addresses are separated by commas, e.g.\n&#x201C;`192.168.1.1:12345, 192.168.1.2:12345, unix:/tmp/sock`&#x201D;.",
    "module": "ngx_stream_upstream_module"
  },
  {
    "name": "$upstream_bytes_sent",
    "desc": "number of bytes sent to an upstream server (1.11.4).\nValues from several connections\nare separated by commas like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_stream_upstream_module"
  },
  {
    "name": "$upstream_bytes_received",
    "desc": "number of bytes received from an upstream server (1.11.4).\nValues from several connections\nare separated by commas like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_stream_upstream_module"
  },
  {
    "name": "$upstream_connect_time",
    "desc": "time to connect to the upstream server (1.11.4);\nthe time is kept in seconds with millisecond resolution.\nTimes of several connections\nare separated by commas like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_stream_upstream_module"
  },
  {
    "name": "$upstream_first_byte_time",
    "desc": "time to receive the first byte of data (1.11.4);\nthe time is kept in seconds with millisecond resolution.\nTimes of several connections\nare separated by commas like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_stream_upstream_module"
  },
  {
    "name": "$upstream_session_time",
    "desc": "session duration in seconds with millisecond resolution (1.11.4).\nTimes of several connections\nare separated by commas like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_stream_upstream_module"
  },
  {
    "name": "$ssl_preread_server_name",
    "desc": "returns the server name requested through SNI",
    "module": "ngx_stream_ssl_preread_module"
  },
  {
    "name": "$ssl_cipher",
    "desc": "returns the string of ciphers used\nfor an established SSL connection;",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_ciphers",
    "desc": "returns the list of ciphers supported by the client (1.11.7).\nKnown ciphers are listed by names, unknown are shown in hexadecimal,\nfor example:\n<blockquote class=\"example\"><pre>\nAES128-SHA:AES256-SHA:0x00ff\n</pre></blockquote>\n<blockquote class=\"note\">\nThe variable is fully supported only when using OpenSSL version 1.0.2 or higher.\nWith older versions, the variable is available\nonly for new sessions and lists only known ciphers.\n</blockquote>",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_cert",
    "desc": "returns the client certificate in the PEM format\nfor an established SSL connection, with each line except the first\nprepended with the tab character (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_fingerprint",
    "desc": "returns the SHA1 fingerprint of the client certificate\nfor an established SSL connection (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_i_dn",
    "desc": "returns the &#x201C;issuer&#xA0;DN&#x201D; string of the client certificate\nfor an established SSL connection according to\n<a href=\"https://tools.ietf.org/html/rfc2253\">RFC 2253</a> (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_raw_cert",
    "desc": "returns the client certificate in the PEM format\nfor an established SSL connection (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_s_dn",
    "desc": "returns the &#x201C;subject&#xA0;DN&#x201D; string of the client certificate\nfor an established SSL connection according to\n<a href=\"https://tools.ietf.org/html/rfc2253\">RFC 2253</a> (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_serial",
    "desc": "returns the serial number of the client certificate\nfor an established SSL connection (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_v_end",
    "desc": "returns the end date of the client certificate (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_v_remain",
    "desc": "returns the number of days\nuntil the client certificate expires (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_v_start",
    "desc": "returns the start date of the client certificate (1.11.8);",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_client_verify",
    "desc": "returns the result of client certificate verification (1.11.8):\n&#x201C;`SUCCESS`&#x201D;, &#x201C;`FAILED:`*`reason`*&#x201D;,\nand &#x201C;`NONE`&#x201D; if a certificate was not present;",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_curves",
    "desc": "returns the list of curves supported by the client (1.11.7).\nKnown curves are listed by names, unknown are shown in hexadecimal,\nfor example:\n<blockquote class=\"example\"><pre>\n0x001d:prime256v1:secp521r1:secp384r1\n</pre></blockquote>\n<blockquote class=\"note\">\nThe variable is supported only when using OpenSSL version 1.0.2 or higher.\nWith older versions, the variable value will be an empty string.\n</blockquote>\n<blockquote class=\"note\">\nThe variable is available only for new sessions.\n</blockquote>",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_protocol",
    "desc": "returns the protocol of an established SSL connection;",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_server_name",
    "desc": "returns the server name requested through\n<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">SNI</a>;",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_session_id",
    "desc": "returns the session identifier of an established SSL connection;",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$ssl_session_reused",
    "desc": "returns &#x201C;`r`&#x201D; if an SSL session was reused,\nor &#x201C;`.`&#x201D; otherwise.",
    "module": "ngx_stream_ssl_module"
  },
  {
    "name": "$realip_remote_addr",
    "desc": "keeps the original client address",
    "module": "ngx_stream_realip_module"
  },
  {
    "name": "$realip_remote_port",
    "desc": "keeps the original client port",
    "module": "ngx_stream_realip_module"
  },
  {
    "name": "$binary_remote_addr",
    "desc": "client address in a binary form, value&#x2019;s length is always 4 bytes\nfor IPv4 addresses or 16 bytes for IPv6 addresses",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$bytes_received",
    "desc": "number of bytes received from a client (1.11.4)",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$bytes_sent",
    "desc": "number of bytes sent to a client",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$connection",
    "desc": "connection serial number",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$hostname",
    "desc": "host name",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$msec",
    "desc": "current time in seconds with the milliseconds resolution",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$nginx_version",
    "desc": "nginx version",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$pid",
    "desc": "PID of the worker process",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$protocol",
    "desc": "protocol used to communicate with the client:\n`TCP` or `UDP` (1.11.4)",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$proxy_protocol_addr",
    "desc": "client address from the PROXY protocol header, or an empty string otherwise\n(1.11.4)\n<p>\nThe PROXY protocol must be previously enabled by setting the\n`proxy_protocol` parameter\nin the <a href=\"#listen\">listen</a> directive.\n</p>",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$proxy_protocol_port",
    "desc": "client port from the PROXY protocol header, or an empty string otherwise\n(1.11.4)\n<p>\nThe PROXY protocol must be previously enabled by setting the\n`proxy_protocol` parameter\nin the <a href=\"#listen\">listen</a> directive.\n</p>",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$remote_addr",
    "desc": "client address",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$remote_port",
    "desc": "client port",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$server_addr",
    "desc": "an address of the server which accepted a connection\n<p>\nComputing a value of this variable usually requires one system call.\nTo avoid a system call, the <a href=\"#listen\">listen</a> directives\nmust specify addresses and use the `bind` parameter.\n</p>",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$server_port",
    "desc": "port of the server which accepted a connection",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$session_time",
    "desc": "session duration in seconds with a milliseconds resolution\n(1.11.4);",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$status",
    "desc": "session status (1.11.4), can be one of the following:\n<dl class=\"compact\">\n\n<dt>`200`</dt>\n<dd>\nsession completed successfully\n</dd>\n\n<dt>`400`</dt>\n<dd>\nclient data could not be parsed, for example,\nthe <a href=\"#proxy_protocol\">PROXY protocol</a> header\n</dd>\n\n<dt>`403`</dt>\n<dd>\naccess forbidden, for example, when access is limited for\n<a href=\"ngx_stream_access_module.html\">certain client addresses</a>\n</dd>\n\n<dt>`500`</dt>\n<dd>\ninternal server error\n</dd>\n\n<dt>`502`</dt>\n<dd>\nbad gateway, for example,\nif an upstream server could not be selected or reached.\n</dd>\n\n<dt>`503`</dt>\n<dd>\nservice unavailable, for example, when access is limited by the\n<a href=\"ngx_stream_limit_conn_module.html\">number of connections</a>\n</dd>\n\n</dl>",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "200",
    "desc": "session completed successfully",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "400",
    "desc": "client data could not be parsed, for example,\nthe <a href=\"#proxy_protocol\">PROXY protocol</a> header",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "403",
    "desc": "access forbidden, for example, when access is limited for\n<a href=\"ngx_stream_access_module.html\">certain client addresses</a>",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "500",
    "desc": "internal server error",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "502",
    "desc": "bad gateway, for example,\nif an upstream server could not be selected or reached.",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "503",
    "desc": "service unavailable, for example, when access is limited by the\n<a href=\"ngx_stream_limit_conn_module.html\">number of connections</a>",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$time_iso8601",
    "desc": "local time in the ISO 8601 standard format",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$time_local",
    "desc": "local time in the Common Log Format",
    "module": "ngx_stream_core_module"
  },
  {
    "name": "$http2",
    "desc": "negotiated protocol identifier:\n&#x201C;`h2`&#x201D; for HTTP/2 over TLS,\n&#x201C;`h2c`&#x201D; for HTTP/2 over cleartext TCP,\nor an empty string otherwise.",
    "module": "ngx_http_v2_module"
  },
  {
    "name": "$uid_got",
    "desc": "The cookie name and received client identifier.",
    "module": "ngx_http_userid_module"
  },
  {
    "name": "$uid_reset",
    "desc": "If the variable is set to a non-empty string that is not &#x201C;`0`&#x201D;,\nthe client identifiers are reset.\nThe special value &#x201C;`log`&#x201D; additionally leads to the output of\nmessages about the reset identifiers to the\n<a href=\"../ngx_core_module.html#error_log\">error_log</a>.",
    "module": "ngx_http_userid_module"
  },
  {
    "name": "$uid_set",
    "desc": "The cookie name and sent client identifier.",
    "module": "ngx_http_userid_module"
  },
  {
    "name": "$upstream_addr",
    "desc": "keeps the IP address and port,\nor the path to the UNIX-domain socket of the upstream server.\nIf several servers were contacted during request processing,\ntheir addresses are separated by commas, e.g.\n&#x201C;`192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock`&#x201D;.\nIf an internal redirect from one server group to another happens,\ninitiated by\n&#x201C;X-Accel-Redirect&#x201D; or\n<a href=\"ngx_http_core_module.html#error_page\">error_page</a>,\nthen the server addresses from different groups are separated by colons, e.g.\n&#x201C;`192.168.1.1:80, 192.168.1.2:80, unix:/tmp/sock : 192.168.10.1:80, 192.168.10.2:80`&#x201D;.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_bytes_received",
    "desc": "number of bytes received from an upstream server (1.11.4).\nValues from several connections\nare separated by commas and colons like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_cache_status",
    "desc": "keeps the status of accessing a response cache (0.8.3).\nThe status can be either &#x201C;`MISS`&#x201D;,\n&#x201C;`BYPASS`&#x201D;, &#x201C;`EXPIRED`&#x201D;,\n&#x201C;`STALE`&#x201D;, &#x201C;`UPDATING`&#x201D;,\n&#x201C;`REVALIDATED`&#x201D;, or &#x201C;`HIT`&#x201D;.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_connect_time",
    "desc": "keeps time spent on establishing a connection with the upstream server (1.9.1);\nthe time is kept in seconds with millisecond resolution.\nIn case of SSL, includes time spent on handshake.\nTimes of several connections\nare separated by commas and colons like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_cookie_name",
    "desc": "cookie with the specified *`name`* sent by the upstream server\nin the &#x201C;Set-Cookie&#x201D; response header field (1.7.1).\nOnly the cookies from the response of the last server are saved.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_header_time",
    "desc": "keeps time\nspent on receiving the response header from the upstream server (1.7.10);\nthe time is kept in seconds with millisecond resolution.\nTimes of several responses\nare separated by commas and colons like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_http_name",
    "desc": "keep server response header fields.\nFor example, the &#x201C;Server&#x201D; response header field\nis available through the `$upstream_http_server` variable.\nThe rules of converting header field names to variable names are the same\nas for the variables that start with the\n&#x201C;<a href=\"ngx_http_core_module.html#var_http_\">$http_</a>&#x201D; prefix.\nOnly the header fields from the response of the last server are saved.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_response_length",
    "desc": "keeps the length of the response obtained from the upstream server (0.7.27);\nthe length is kept in bytes.\nLengths of several responses\nare separated by commas and colons like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_response_time",
    "desc": "keeps time spent on receiving the response from the upstream server;\nthe time is kept in seconds with millisecond resolution.\nTimes of several responses\nare separated by commas and colons like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$upstream_status",
    "desc": "keeps status code of the response obtained from the upstream server.\nStatus codes of several responses\nare separated by commas and colons like addresses in the\n<a href=\"#var_upstream_addr\">$upstream_addr</a> variable.",
    "module": "ngx_http_upstream_module"
  },
  {
    "name": "$connections_active",
    "desc": "same as the `Active connections` value;",
    "module": "ngx_http_stub_status_module"
  },
  {
    "name": "$connections_reading",
    "desc": "same as the `Reading` value;",
    "module": "ngx_http_stub_status_module"
  },
  {
    "name": "$connections_writing",
    "desc": "same as the `Writing` value;",
    "module": "ngx_http_stub_status_module"
  },
  {
    "name": "$connections_waiting",
    "desc": "same as the `Waiting` value.",
    "module": "ngx_http_stub_status_module"
  },
  {
    "name": "$ssl_cipher",
    "desc": "returns the string of ciphers used\nfor an established SSL connection;",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_ciphers",
    "desc": "returns the list of ciphers supported by the client (1.11.7).\nKnown ciphers are listed by names, unknown are shown in hexadecimal,\nfor example:\n<blockquote class=\"example\"><pre>\nAES128-SHA:AES256-SHA:0x00ff\n</pre></blockquote>\n<blockquote class=\"note\">\nThe variable is fully supported only when using OpenSSL version 1.0.2 or higher.\nWith older versions, the variable is available\nonly for new sessions and lists only known ciphers.\n</blockquote>",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_cert",
    "desc": "returns the client certificate in the PEM format\nfor an established SSL connection, with each line except the first\nprepended with the tab character;\nthis is intended for the use in the\n<a href=\"ngx_http_proxy_module.html#proxy_set_header\">proxy_set_header</a> directive;",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_fingerprint",
    "desc": "returns the SHA1 fingerprint of the client certificate\nfor an established SSL connection (1.7.1);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_i_dn",
    "desc": "returns the &#x201C;issuer&#xA0;DN&#x201D; string of the client certificate\nfor an established SSL connection according to\n<a href=\"https://tools.ietf.org/html/rfc2253\">RFC 2253</a> (1.11.6);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_i_dn_legacy",
    "desc": "returns the &#x201C;issuer&#xA0;DN&#x201D; string of the client certificate\nfor an established SSL connection;\n<blockquote class=\"note\">\nPrior to version 1.11.6, the variable name was `$ssl_client_i_dn`.\n</blockquote>",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_raw_cert",
    "desc": "returns the client certificate in the PEM format\nfor an established SSL connection;",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_s_dn",
    "desc": "returns the &#x201C;subject&#xA0;DN&#x201D; string of the client certificate\nfor an established SSL connection according to\n<a href=\"https://tools.ietf.org/html/rfc2253\">RFC 2253</a> (1.11.6);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_s_dn_legacy",
    "desc": "returns the &#x201C;subject&#xA0;DN&#x201D; string of the client certificate\nfor an established SSL connection;\n<blockquote class=\"note\">\nPrior to version 1.11.6, the variable name was `$ssl_client_s_dn`.\n</blockquote>",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_serial",
    "desc": "returns the serial number of the client certificate\nfor an established SSL connection;",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_v_end",
    "desc": "returns the end date of the client certificate (1.11.7);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_v_remain",
    "desc": "returns the number of days\nuntil the client certificate expires (1.11.7);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_v_start",
    "desc": "returns the start date of the client certificate (1.11.7);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_client_verify",
    "desc": "returns the result of client certificate verification:\n&#x201C;`SUCCESS`&#x201D;, &#x201C;`FAILED:`*`reason`*&#x201D;,\nand &#x201C;`NONE`&#x201D; if a certificate was not present;\n<blockquote class=\"note\">\nPrior to version 1.11.7, the &#x201C;`FAILED`&#x201D; result\ndid not contain the *`reason`* string.\n</blockquote>",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_curves",
    "desc": "returns the list of curves supported by the client (1.11.7).\nKnown curves are listed by names, unknown are shown in hexadecimal,\nfor example:\n<blockquote class=\"example\"><pre>\n0x001d:prime256v1:secp521r1:secp384r1\n</pre></blockquote>\n<blockquote class=\"note\">\nThe variable is supported only when using OpenSSL version 1.0.2 or higher.\nWith older versions, the variable value will be an empty string.\n</blockquote>\n<blockquote class=\"note\">\nThe variable is available only for new sessions.\n</blockquote>",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_protocol",
    "desc": "returns the protocol of an established SSL connection;",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_server_name",
    "desc": "returns the server name requested through\n<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">SNI</a>\n(1.7.0);",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_session_id",
    "desc": "returns the session identifier of an established SSL connection;",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$ssl_session_reused",
    "desc": "returns &#x201C;`r`&#x201D; if an SSL session was reused,\nor &#x201C;`.`&#x201D; otherwise (1.5.11).",
    "module": "ngx_http_ssl_module"
  },
  {
    "name": "$date_local",
    "desc": "current time in the local time zone.\nThe format is set by the `config` command\nwith the `timefmt` parameter.",
    "module": "ngx_http_ssi_module"
  },
  {
    "name": "$date_gmt",
    "desc": "current time in GMT.\nThe format is set by the `config` command\nwith the `timefmt` parameter.",
    "module": "ngx_http_ssi_module"
  },
  {
    "name": "$spdy",
    "desc": "SPDY protocol version for SPDY connections,\nor an empty string otherwise;",
    "module": "ngx_http_spdy_module"
  },
  {
    "name": "$spdy_request_priority",
    "desc": "request priority for SPDY connections,\nor an empty string otherwise.",
    "module": "ngx_http_spdy_module"
  },
  {
    "name": "$slice_range",
    "desc": "the current slice range in\n<a href=\"https://tools.ietf.org/html/rfc7233#section-2.1\">HTTP\nbyte range</a> format,\nfor example, `bytes=0-1048575`.",
    "module": "ngx_http_slice_module"
  },
  {
    "name": "$session_log_id",
    "desc": "current session ID;",
    "module": "ngx_http_session_log_module"
  },
  {
    "name": "$session_log_binary_id",
    "desc": "current session ID in binary form (16 bytes).",
    "module": "ngx_http_session_log_module"
  },
  {
    "name": "$secure_link",
    "desc": "The status of a link check.\nThe specific value depends on the selected operation mode.",
    "module": "ngx_http_secure_link_module"
  },
  {
    "name": "$secure_link_expires",
    "desc": "The lifetime of a link passed in a request;\nintended to be used only in the\n<a href=\"#secure_link_md5\">secure_link_md5</a> directive.",
    "module": "ngx_http_secure_link_module"
  },
  {
    "name": "$invalid_referer",
    "desc": "Empty string, if the &#x201C;Referer&#x201D; request header field\nvalue is considered\n<a href=\"#valid_referers\">valid</a>, otherwise &#x201C;`1`&#x201D;.",
    "module": "ngx_http_referer_module"
  },
  {
    "name": "$realip_remote_addr",
    "desc": "keeps the original client address (1.9.7)",
    "module": "ngx_http_realip_module"
  },
  {
    "name": "$realip_remote_port",
    "desc": "keeps the original client port (1.11.0)",
    "module": "ngx_http_realip_module"
  },
  {
    "name": "$proxy_host",
    "desc": "name and port of a proxied server as specified in the\n<a href=\"#proxy_pass\">proxy_pass</a> directive;",
    "module": "ngx_http_proxy_module"
  },
  {
    "name": "$proxy_port",
    "desc": "port of a proxied server as specified in the\n<a href=\"#proxy_pass\">proxy_pass</a> directive, or the protocol&#x2019;s default port;",
    "module": "ngx_http_proxy_module"
  },
  {
    "name": "$proxy_add_x_forwarded_for",
    "desc": "the &#x201C;X-Forwarded-For&#x201D; client request header field\nwith the `$remote_addr` variable appended to it, separated by a comma.\nIf the &#x201C;X-Forwarded-For&#x201D; field is not present in the client\nrequest header, the `$proxy_add_x_forwarded_for` variable is equal\nto the `$remote_addr` variable.",
    "module": "ngx_http_proxy_module"
  },
  {
    "name": "$memcached_key",
    "desc": "Defines a key for obtaining response from a memcached server.",
    "module": "ngx_http_memcached_module"
  },
  {
    "name": "$gzip_ratio",
    "desc": "achieved compression ratio, computed as the ratio between the\noriginal and compressed response sizes.",
    "module": "ngx_http_gzip_module"
  },
  {
    "name": "$fastcgi_script_name",
    "desc": "request URI or, if a URI ends with a slash, request URI with an index file\nname configured by the <a href=\"#fastcgi_index\">fastcgi_index</a> directive appended to it.\nThis variable can be used to set the\n`SCRIPT_FILENAME` and `PATH_TRANSLATED`\nparameters that determine the script name in PHP.\nFor example, for the &#x201C;`/info/`&#x201D; request with the\nfollowing directives\n<blockquote class=\"example\"><pre>\nfastcgi_index index.php;\nfastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;\n</pre></blockquote>\nthe `SCRIPT_FILENAME` parameter will be equal to\n&#x201C;`/home/www/scripts/php/info/index.php`&#x201D;.\n\n<p>\nWhen using the <a href=\"#fastcgi_split_path_info\">fastcgi_split_path_info</a> directive,\nthe `$fastcgi_script_name` variable equals the value of\nthe first capture set by the directive.\n</p>",
    "module": "ngx_http_fastcgi_module"
  },
  {
    "name": "$fastcgi_path_info",
    "desc": "the value of the second capture set by the\n<a href=\"#fastcgi_split_path_info\">fastcgi_split_path_info</a> directive.\nThis variable can be used to set the\n`PATH_INFO` parameter.",
    "module": "ngx_http_fastcgi_module"
  },
  {
    "name": "$jwt_header_name",
    "desc": "returns the value of a specified\n<a href=\"https://tools.ietf.org/html/rfc7515#section-4\">JOSE header</a>",
    "module": "ngx_http_auth_jwt_module"
  },
  {
    "name": "$jwt_claim_name",
    "desc": "returns the value of a specified\n<a href=\"https://tools.ietf.org/html/rfc7519#section-4\">JWT claim</a>",
    "module": "ngx_http_auth_jwt_module"
  },
  {
    "name": "$arg_name",
    "desc": "argument *`name`* in the request line",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$args",
    "desc": "arguments in the request line",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$binary_remote_addr",
    "desc": "client address in a binary form, value&#x2019;s length is always 4 bytes\nfor IPv4 addresses or 16 bytes for IPv6 addresses",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$body_bytes_sent",
    "desc": "number of bytes sent to a client, not counting the response header;\nthis variable is compatible with the &#x201C;`%B`&#x201D; parameter of the\n`mod_log_config`\nApache module",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$bytes_sent",
    "desc": "number of bytes sent to a client (1.3.8, 1.2.5)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$connection",
    "desc": "connection serial number (1.3.8, 1.2.5)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$connection_requests",
    "desc": "current number of requests made through a connection (1.3.8, 1.2.5)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$content_length",
    "desc": "&#x201C;Content-Length&#x201D; request header field",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$content_type",
    "desc": "&#x201C;Content-Type&#x201D; request header field",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$cookie_name",
    "desc": "the *`name`* cookie",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$document_root",
    "desc": "<a href=\"#root\">root</a> or <a href=\"#alias\">alias</a> directive&#x2019;s value\nfor the current request",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$document_uri",
    "desc": "same as `$uri`",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$host",
    "desc": "in this order of precedence:\nhost name from the request line, or\nhost name from the &#x201C;Host&#x201D; request header field, or\nthe server name matching a request",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$hostname",
    "desc": "host name",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$http_name",
    "desc": "arbitrary request header field;\nthe last part of a variable name is the field name converted\nto lower case with dashes replaced by underscores",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$https",
    "desc": "&#x201C;`on`&#x201D;\nif connection operates in SSL mode,\nor an empty string otherwise",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$is_args",
    "desc": "&#x201C;`?`&#x201D; if a request line has arguments,\nor an empty string otherwise",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$limit_rate",
    "desc": "setting this variable enables response rate limiting;\nsee <a href=\"#limit_rate\">limit_rate</a>",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$msec",
    "desc": "current time in seconds with the milliseconds resolution (1.3.9, 1.2.6)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$nginx_version",
    "desc": "nginx version",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$pid",
    "desc": "PID of the worker process",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$pipe",
    "desc": "&#x201C;`p`&#x201D; if request was pipelined, &#x201C;`.`&#x201D;\notherwise (1.3.12, 1.2.7)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$proxy_protocol_addr",
    "desc": "client address from the PROXY protocol header, or an empty string otherwise\n(1.5.12)\n<p>\nThe PROXY protocol must be previously enabled by setting the\n`proxy_protocol` parameter\nin the <a href=\"#listen\">listen</a> directive.\n</p>",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$proxy_protocol_port",
    "desc": "client port from the PROXY protocol header, or an empty string otherwise\n(1.11.0)\n<p>\nThe PROXY protocol must be previously enabled by setting the\n`proxy_protocol` parameter\nin the <a href=\"#listen\">listen</a> directive.\n</p>",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$query_string",
    "desc": "same as `$args`",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$realpath_root",
    "desc": "an absolute pathname corresponding to the\n<a href=\"#root\">root</a> or <a href=\"#alias\">alias</a> directive&#x2019;s value\nfor the current request,\nwith all symbolic links resolved to real paths",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$remote_addr",
    "desc": "client address",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$remote_port",
    "desc": "client port",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$remote_user",
    "desc": "user name supplied with the Basic authentication",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request",
    "desc": "full original request line",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_body",
    "desc": "request body\n<p>\nThe variable&#x2019;s value is made available in locations\nprocessed by the\n<a href=\"ngx_http_proxy_module.html#proxy_pass\">proxy_pass</a>,\n<a href=\"ngx_http_fastcgi_module.html#fastcgi_pass\">fastcgi_pass</a>,\n<a href=\"ngx_http_uwsgi_module.html#uwsgi_pass\">uwsgi_pass</a>,\nand\n<a href=\"ngx_http_scgi_module.html#scgi_pass\">scgi_pass</a>\ndirectives when the request body was read to\na <a href=\"#client_body_buffer_size\">memory buffer</a>.\n</p>",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_body_file",
    "desc": "name of a temporary file with the request body\n<p>\nAt the end of processing, the file needs to be removed.\nTo always write the request body to a file,\n<a href=\"#client_body_in_file_only\">client_body_in_file_only</a> needs to be enabled.\nWhen the name of a temporary file is passed in a proxied request\nor in a request to a FastCGI/uwsgi/SCGI server,\npassing the request body should be disabled by the\n<a href=\"ngx_http_proxy_module.html#proxy_pass_request_body\">\nproxy_pass_request_body off</a>,\n<a href=\"ngx_http_fastcgi_module.html#fastcgi_pass_request_body\">\nfastcgi_pass_request_body off</a>,\n<a href=\"ngx_http_uwsgi_module.html#uwsgi_pass_request_body\">\nuwsgi_pass_request_body off</a>, or\n<a href=\"ngx_http_scgi_module.html#scgi_pass_request_body\">\nscgi_pass_request_body off</a>\ndirectives, respectively.\n</p>",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_completion",
    "desc": "&#x201C;`OK`&#x201D; if a request has completed,\nor an empty string otherwise",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_filename",
    "desc": "file path for the current request, based on the\n<a href=\"#root\">root</a> or <a href=\"#alias\">alias</a>\ndirectives, and the request URI",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_id",
    "desc": "unique request identifier\ngenerated from 16 random bytes, in hexadecimal (1.11.0)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_length",
    "desc": "request length (including request line, header, and request body)\n(1.3.12, 1.2.7)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_method",
    "desc": "request method, usually\n&#x201C;`GET`&#x201D; or &#x201C;`POST`&#x201D;",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_time",
    "desc": "request processing time in seconds with a milliseconds resolution\n(1.3.9, 1.2.6);\ntime elapsed since the first bytes were read from the client",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$request_uri",
    "desc": "full original request URI (with arguments)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$scheme",
    "desc": "request scheme, &#x201C;`http`&#x201D; or &#x201C;`https`&#x201D;",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$sent_http_name",
    "desc": "arbitrary response header field;\nthe last part of a variable name is the field name converted\nto lower case with dashes replaced by underscores",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$server_addr",
    "desc": "an address of the server which accepted a request\n<p>\nComputing a value of this variable usually requires one system call.\nTo avoid a system call, the <a href=\"#listen\">listen</a> directives\nmust specify addresses and use the `bind` parameter.\n</p>",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$server_name",
    "desc": "name of the server which accepted a request",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$server_port",
    "desc": "port of the server which accepted a request",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$server_protocol",
    "desc": "request protocol, usually\n&#x201C;`HTTP/1.0`&#x201D;,\n&#x201C;`HTTP/1.1`&#x201D;,\nor\n&#x201C;<a href=\"ngx_http_v2_module.html\">HTTP/2.0</a>&#x201D;",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$status",
    "desc": "response status (1.3.2, 1.2.2)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$tcpinfo_rtt,\n$tcpinfo_rttvar,\n$tcpinfo_snd_cwnd,\n$tcpinfo_rcv_space",
    "desc": "information about the client TCP connection; available on systems\nthat support the `TCP_INFO` socket option",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$time_iso8601",
    "desc": "local time in the ISO 8601 standard format (1.3.12, 1.2.7)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$time_local",
    "desc": "local time in the Common Log Format (1.3.12, 1.2.7)",
    "module": "ngx_http_core_module"
  },
  {
    "name": "$uri",
    "desc": "current URI in request, <a href=\"#location\">normalized</a>\n<p>\nThe value of `$uri` may change during request processing,\ne.g. when doing internal redirects, or when using index files.\n</p>",
    "module": "ngx_http_core_module"
  }
]
