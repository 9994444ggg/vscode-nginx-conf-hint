[
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_capture_error_log size;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_capture_error_log 100k;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Enables a buffer of the specified size for capturing all the nginx error log message data (not just those produced by this module or the nginx http subsystem, but everything) without touching files or disks.</p><p>You can use units like k and m in the size value, as in<p><p>lua_capture_error_log 100k;<p><p>As a rule of thumb, a 4KB buffer can usually hold about 20 typical error log messages. So do the maths!<p><p>This buffer never grows. If it is full, new error log messages will replace the oldest ones in the buffer.<p><p>The size of the buffer must be bigger than the maximum length of a single error log message (which is 4K in OpenResty and 2K in stock NGINX).<p><p>You can read the messages in the buffer on the Lua land via the get_logs() function of the ngx.errlog module of the lua-resty-core library. This Lua API function will return the captured error log messages and also remove these already read from the global capturing buffer, making room for any new error log data. For this reason, the user should not configure this buffer to be too big if the user read the buffered error log data fast enough.<p><p>Note that the log level specified in the standard error_log directive does have effect on this capturing facility. It only captures log messages of a level no lower than the specified log level in the error_log directive. The user can still choose to set an even higher filtering log level on the fly via the Lua API function errlog.set_filter_level. So it is more flexible than the static error_log directive.<p><p>It is worth noting that there is no way to capture the debugging logs without building OpenResty or NGINX with the ./configure option --with-debug. And enabling debugging logs is strongly discouraged in production builds due to high overhead.<p><p>This directive was first introduced in the v0.10.9 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_capture_error_log",
		"name": "lua_capture_error_log"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_use_default_type on | off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_use_default_type on;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Specifies whether to use the MIME type specified by the default_type directive for the default value of the Content-Type response header. Deactivate this directive if a default Content-Type response header for Lua request handlers is not desired.</p><p>This directive is turned on by default.<p><p>This directive was first introduced in the v0.9.1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_use_default_type",
		"name": "lua_use_default_type"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_malloc_trim <request-count>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_malloc_trim 1000;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Asks the underlying libc runtime library to release its cached free memory back to the operating system every N requests processed by the NGINX core. By default, N is 1000. You can configure the request count by using your own numbers. Smaller numbers mean more frequent releases, which may introduce higher CPU time consumption and smaller memory footprint while larger numbers usually lead to less CPU time overhead and relatively larger memory footprint. Just tune the number for your own use cases.</p><p>Configuring the argument to 0 essentially turns off the periodical memory trimming altogether.<p><p>lua_malloc_trim 0;  # turn off trimming completely<p><p>The current implementation uses an NGINX log phase handler to do the request counting. So the appearance of the log_subrequest on directives in nginx.conf may make the counting faster when subrequests are involved. By default, only \"main requests\" count.<p><p>Note that this directive does not affect the memory allocated by LuaJIT's own allocator based on the mmap system call.<p><p>This directive was first introduced in the v0.10.7 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_malloc_trim",
		"name": "lua_malloc_trim"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_code_cache on | off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_code_cache on;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Enables or disables the Lua code cache for Lua code in *_by_lua_file directives (like set_by_lua_file and content_by_lua_file) and Lua modules.</p><p>When turning off, every request served by ngx_lua will run in a separate Lua VM instance, starting from the 0.9.3 release. So the Lua files referenced in set_by_lua_file, content_by_lua_file, access_by_lua_file, and etc will not be cached and all Lua modules used will be loaded from scratch. With this in place, developers can adopt an edit-and-refresh approach.<p><p>Please note however, that Lua code written inlined within nginx.conf such as those specified by set_by_lua, content_by_lua, access_by_lua, and rewrite_by_lua will not be updated when you edit the inlined Lua code in your nginx.conf file because only the Nginx config file parser can correctly parse the nginx.conf file and the only way is to reload the config file by sending a HUP signal or just to restart Nginx.<p><p>Even when the code cache is enabled, Lua files which are loaded by dofile or loadfile in *_by_lua_file cannot be cached (unless you cache the results yourself). Usually you can either use the init_by_lua or init_by_lua_file directives to load all such files or just make these Lua files true Lua modules and load them via require.<p><p>The ngx_lua module does not support the stat mode available with the Apache mod_lua module (yet).<p><p>Disabling the Lua code cache is strongly discouraged for production use and should only be used during development as it has a significant negative impact on overall performance. For example, the performance of a \"hello world\" Lua example can drop by an order of magnitude after disabling the Lua code cache.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_code_cache",
		"name": "lua_code_cache"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_regex_cache_max_entries <num>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_regex_cache_max_entries 1024;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Specifies the maximum number of entries allowed in the worker process level compiled regex cache.</p><p>The regular expressions used in ngx.re.match, ngx.re.gmatch, ngx.re.sub, and ngx.re.gsub will be cached within this cache if the regex option o (i.e., compile-once flag) is specified.<p><p>The default number of entries allowed is 1024 and when this limit is reached, new regular expressions will not be cached (as if the o option was not specified) and there will be one, and only one, warning in the error.log file:<p><p>2011/08/27 23:18:26 [warn] 31997#0: *1 lua exceeding regex cache max entries (1024), ...<p><p>If you are using the ngx.re.* implementation of lua-resty-core by loading the resty.core.regex module (or just the resty.core module), then an LRU cache is used for the regex cache being used here.<p><p>Do not activate the o option for regular expressions (and/or replace string arguments for ngx.re.sub and ngx.re.gsub) that are generated on the fly and give rise to infinite variations to avoid hitting the specified limit.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_regex_cache_max_entries",
		"name": "lua_regex_cache_max_entries"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_regex_match_limit <num>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_regex_match_limit 0;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Specifies the \"match limit\" used by the PCRE library when executing the ngx.re API. To quote the PCRE manpage, \"the limit ... has the effect of limiting the amount of backtracking that can take place.\"</p><p>When the limit is hit, the error string \"pcre_exec() failed: -8\" will be returned by the ngx.re API functions on the Lua land.<p><p>When setting the limit to 0, the default \"match limit\" when compiling the PCRE library is used. And this is the default value of this directive.<p><p>This directive was first introduced in the v0.8.5 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_regex_match_limit",
		"name": "lua_regex_match_limit"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_package_path <lua-style-path-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_package_path '';</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Sets the Lua module search path used by scripts specified by set_by_lua, content_by_lua and others. The path string is in standard Lua path form, and ;; can be used to stand for the original search paths.</p><p>As from the v0.5.0rc29 release, the special notation $prefix or ${prefix} can be used in the search path string to indicate the path of the server prefix usually determined by the -p PATH command-line option while starting the Nginx server.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_package_path",
		"name": "lua_package_path"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_package_cpath <lua-style-cpath-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_package_cpath '';</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Sets the Lua C-module search path used by scripts specified by set_by_lua, content_by_lua and others. The cpath string is in standard Lua cpath form, and ;; can be used to stand for the original cpath.</p><p>As from the v0.5.0rc29 release, the special notation $prefix or ${prefix} can be used in the search path string to indicate the path of the server prefix usually determined by the -p PATH command-line option while starting the Nginx server.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_package_cpath",
		"name": "lua_package_cpath"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>init_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>init_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>NOTE Use of this directive is discouraged following the v0.9.17 release. Use the init_by_lua_block directive instead.</p><p>phase: loading-config<p><p>Runs the Lua code specified by the argument <lua-script-str> on the global Lua VM level when the Nginx master process (if any) is loading the Nginx config file.<p><p>When Nginx receives the HUP signal and starts reloading the config file, the Lua VM will also be re-created and init_by_lua will run again on the new Lua VM. In case that the lua_code_cache directive is turned off (default on), the init_by_lua handler will run upon every request because in this special mode a standalone Lua VM is always created for each request.<p><p>Usually you can pre-load Lua modules at server start-up by means of this hook and take advantage of modern operating systems' copy-on-write (COW) optimization. Here is an example for pre-loading Lua modules:<p><p> # this runs before forking out nginx worker processes:<p><p> init_by_lua_block { require \"cjson\" }<p><p> server {<p><p>     location = /api {<p><p>         content_by_lua_block {<p><p>             -- the following require() will just  return<p><p>             -- the alrady loaded module from package.loaded:<p><p>             ngx.say(require \"cjson\".encode{dog = 5, cat = 6})<p><p>         }<p><p>     }<p><p> }<p><p>You can also initialize the lua_shared_dict shm storage at this phase. Here is an example for this:<p><p> lua_shared_dict dogs 1m;<p><p> init_by_lua_block {<p><p>     local dogs = ngx.shared.dogs;<p><p>     dogs:set(\"Tom\", 56)<p><p> }<p><p> server {<p><p>     location = /api {<p><p>         content_by_lua_block {<p><p>             local dogs = ngx.shared.dogs;<p><p>             ngx.say(dogs:get(\"Tom\"))<p><p>         }<p><p>     }<p><p> }<p><p>But note that, the lua_shared_dict's shm storage will not be cleared through a config reload (via the HUP signal, for example). So if you do not want to re-initialize the shm storage in your init_by_lua code in this case, then you just need to set a custom flag in the shm storage and always check the flag in your init_by_lua code.<p><p>Because the Lua code in this context runs before Nginx forks its worker processes (if any), data or code loaded here will enjoy the Copy-on-write (COW) feature provided by many operating systems among all the worker processes, thus saving a lot of memory.<p><p>Do not initialize your own Lua global variables in this context because use of Lua global variables have performance penalties and can lead to global namespace pollution (see the Lua Variable Scope section for more details). The recommended way is to use proper Lua module files (but do not use the standard Lua function module() to define Lua modules because it pollutes the global namespace as well) and call require() to load your own module files in init_by_lua or other contexts (require() does cache the loaded Lua modules in the global package.loaded table in the Lua registry so your modules will only loaded once for the whole Lua VM instance).<p><p>Only a small set of the Nginx API for Lua is supported in this context:<p><p>Logging APIs: ngx.log and print,<p><p>Shared Dictionary API: ngx.shared.DICT.<p><p>More Nginx APIs for Lua may be supported in this context upon future user requests.<p><p>Basically you can safely use Lua libraries that do blocking I/O in this very context because blocking the master process during server start-up is completely okay. Even the Nginx core does blocking I/O (at least on resolving upstream's host names) at the configure-loading phase.<p><p>You should be very careful about potential security vulnerabilities in your Lua code registered in this context because the Nginx master process is often run under the root account.<p><p>This directive was first introduced in the v0.5.5 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#init_by_lua",
		"name": "init_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>init_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>init_by_lua_block { };</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Similar to the init_by_lua directive except that this directive inlines the Lua source directly inside a pair of curly braces ({}) instead of in an NGINX string literal (which requires special character escaping).</p><p>phase: loading-config<p><p>For instance,<p><p> init_by_lua_block {<p><p>     print(\"I need no extra escaping here, for example: \r\nblah\")<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#init_by_lua_block",
		"name": "init_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>init_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>init_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Equivalent to init_by_lua, except that the file specified by <path-to-lua-script-file> contains the Lua code or Lua/LuaJIT bytecode to be executed.</p><p>phase: loading-config<p><p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.<p><p>This directive was first introduced in the v0.5.5 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#init_by_lua_file",
		"name": "init_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>init_worker_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>init_worker_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>NOTE Use of this directive is discouraged following the v0.9.17 release. Use the init_worker_by_lua_block directive instead.</p><p>phase: starting-worker<p><p>Runs the specified Lua code upon every Nginx worker process's startup when the master process is enabled. When the master process is disabled, this hook will just run after init_by_lua*.<p><p>This hook is often used to create per-worker reoccurring timers (via the ngx.timer.at Lua API), either for backend health-check or other timed routine work. Below is an example,<p><p> init_worker_by_lua '<p><p>     local delay = 3  -- in seconds<p><p>     local new_timer = ngx.timer.at<p><p>     local log = ngx.log<p><p>     local ERR = ngx.ERR<p><p>     local check<p><p>     check = function(premature)<p><p>         if not premature then<p><p>             -- do the health check or other routine work<p><p>             local ok, err = new_timer(delay, check)<p><p>             if not ok then<p><p>                 log(ERR, \"failed to create timer: \", err)<p><p>                 return<p><p>             end<p><p>         end<p><p>     end<p><p>     local hdl, err = new_timer(delay, check)<p><p>     if not hdl then<p><p>         log(ERR, \"failed to create timer: \", err)<p><p>         return<p><p>     end<p><p> ';<p><p>This directive was first introduced in the v0.9.5 release.<p><p>This hook no longer runs in the cache manager and cache loader processes since the v0.10.12 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#init_worker_by_lua",
		"name": "init_worker_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>init_worker_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>init_worker_by_lua_block { };</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Similar to the init_worker_by_lua directive except that this directive inlines the Lua source directly inside a pair of curly braces ({}) instead of in an NGINX string literal (which requires special character escaping).</p><p>phase: starting-worker<p><p>For instance,<p><p> init_worker_by_lua_block {<p><p>     print(\"I need no extra escaping here, for example: \r\nblah\")<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p><p>This hook no longer runs in the cache manager and cache loader processes since the v0.10.12 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#init_worker_by_lua_block",
		"name": "init_worker_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>init_worker_by_lua_file <lua-file-path>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>init_worker_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Similar to init_worker_by_lua, but accepts the file path to a Lua source file or Lua bytecode file.</p><p>phase: starting-worker<p><p>This directive was first introduced in the v0.9.5 release.<p><p>This hook no longer runs in the cache manager and cache loader processes since the v0.10.12 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#init_worker_by_lua_file",
		"name": "init_worker_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>set_by_lua $res <lua-script-str> [$arg1 $arg2 ...];</strong></code><br></td></tr><tr><th>Default:</th><td><pre>set_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>server,server if,location,location if</code><br></td></tr></table>",
		"doc": "<p>Executes code specified in <lua-script-str> with optional input arguments $arg1 $arg2 ..., and returns string output to $res. The code in <lua-script-str> can make API calls and can retrieve input arguments from the ngx.arg table (index starts from 1 and increases sequentially).</p><p>phase: rewrite<p><p>This directive is designed to execute short, fast running code blocks as the Nginx event loop is blocked during code execution. Time consuming code sequences should therefore be avoided.<p><p>This directive is implemented by injecting custom commands into the standard ngx_http_rewrite_module's command list. Because ngx_http_rewrite_module does not support nonblocking I/O in its commands, Lua APIs requiring yielding the current Lua \"light thread\" cannot work in this directive.<p><p>At least the following API functions are currently disabled within the context of set_by_lua:<p><p>Output API functions (e.g., ngx.say and ngx.send_headers)<p><p>Control API functions (e.g., ngx.exit)<p><p>Subrequest API functions (e.g., ngx.location.capture and ngx.location.capture_multi)<p><p>Cosocket API functions (e.g., ngx.socket.tcp and ngx.req.socket).<p><p>Sleeping API function ngx.sleep.<p><p>In addition, note that this directive can only write out a value to a single Nginx variable at a time. However, a workaround is possible using the ngx.var.VARIABLE interface.<p><p> location /foo {<p><p>     set $diff ''; # we have to predefine the $diff variable here<p><p>     set_by_lua $sum '<p><p>         local a = 32<p><p>         local b = 56<p><p>         ngx.var.diff = a - b;  -- write to $diff directly<p><p>         return a + b;          -- return the $sum value normally<p><p>     ';<p><p>     echo \"sum = $sum, diff = $diff\";<p><p> }<p><p>This directive can be freely mixed with all directives of the ngx_http_rewrite_module, set-misc-nginx-module, and array-var-nginx-module modules. All of these directives will run in the same order as they appear in the config file.<p><p> set $foo 32;<p><p> set_by_lua $bar 'return tonumber(ngx.var.foo) + 1';<p><p> set $baz \"bar: $bar\";  # $baz == \"bar: 33\"<p><p>As from the v0.5.0rc29 release, Nginx variable interpolation is disabled in the <lua-script-str> argument of this directive and therefore, the dollar sign character ($) can be used directly.<p><p>This directive requires the ngx_devel_kit module.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#set_by_lua",
		"name": "set_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>set_by_lua_block $res { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>set_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>server,server if,location,location if</code><br></td></tr></table>",
		"doc": "<p>this directive inlines the Lua source directly inside a pair of curly braces ({}) instead of in an NGINX string literal (which requires special character escaping), and</p><p>phase: rewrite<p><p>this directive does not support extra arguments after the Lua script as in set_by_lua.<p><p>For example,<p><p> set_by_lua_block $res { return 32 + math.cos(32) }<p><p> # $res now has the value \"32.834223360507\" or alike.<p><p>No special escaping is required in the Lua code block.<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#set_by_lua_block",
		"name": "set_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>set_by_lua_file $res <path-to-lua-script-file> [$arg1 $arg2 ...];</strong></code><br></td></tr><tr><th>Default:</th><td><pre>set_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>server,server if,location,location if</code><br></td></tr></table>",
		"doc": "<p>Nginx variable interpolation is supported in the <path-to-lua-script-file> argument string of this directive. But special care must be taken for injection attacks.</p><p>phase: rewrite<p><p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.<p><p>When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching lua_code_cache off in nginx.conf to avoid reloading Nginx.<p><p>This directive requires the ngx_devel_kit module.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#set_by_lua_file",
		"name": "set_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>content_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>content_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>location,location if</code><br></td></tr></table>",
		"doc": "<p>Acts as a \"content handler\" and executes Lua code string specified in <lua-script-str> for every request. The Lua code may make API calls and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).</p><p>phase: content<p><p>Do not use this directive and other content handler directives in the same location. For example, this directive and the proxy_pass directive should not be used in the same location.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#content_by_lua",
		"name": "content_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>content_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>content_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>location,location if</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: content<p><p> content_by_lua_block {<p><p>     ngx.say(\"I need no extra escaping here, for example: \r\nblah\")<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#content_by_lua_block",
		"name": "content_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>content_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>content_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>location,location if</code><br></td></tr></table>",
		"doc": "<p>Nginx variables can be used in the <path-to-lua-script-file> string to provide flexibility. This however carries some risks and is not ordinarily recommended.</p><p>phase: content<p><p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.<p><p>When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching lua_code_cache off in nginx.conf to avoid reloading Nginx.<p><p>Nginx variables are supported in the file path for dynamic dispatch, for example:<p><p> # CAUTION: contents in nginx var must be carefully filtered,<p><p> # otherwise there'll be great security risk!<p><p> location ~ ^/app/([-_a-zA-Z0-9/]+) {<p><p>     set $path $1;<p><p>     content_by_lua_file /path/to/lua/app/root/$path.lua;<p><p> }<p><p>But be very careful about malicious user inputs and always carefully validate or filter out the user-supplied path components.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#content_by_lua_file",
		"name": "content_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>rewrite_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>rewrite_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Acts as a rewrite phase handler and executes Lua code string specified in <lua-script-str> for every request. The Lua code may make API calls and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).</p><p>phase: rewrite tail<p><p>Note that this handler always runs after the standard ngx_http_rewrite_module. So the following will work as expected:<p><p> location /foo {<p><p>     set $a 12; # create and initialize $a<p><p>     set $b \"\"; # create and initialize $b<p><p>     rewrite_by_lua 'ngx.var.b = tonumber(ngx.var.a) + 1';<p><p>     echo \"res = $b\";<p><p> }<p><p>because set $a 12 and set $b \"\" run before rewrite_by_lua.<p><p>On the other hand, the following will not work as expected:<p><p> ?  location /foo {<p><p> ?      set $a 12; # create and initialize $a<p><p> ?      set $b ''; # create and initialize $b<p><p> ?      rewrite_by_lua 'ngx.var.b = tonumber(ngx.var.a) + 1';<p><p> ?      if ($b = '13') {<p><p> ?         rewrite ^ /bar redirect;<p><p> ?         break;<p><p> ?      }<p><p> ?<p><p> ?      echo \"res = $b\";<p><p> ?  }<p><p>because if runs before rewrite_by_lua even if it is placed after rewrite_by_lua in the config.<p><p>The right way of doing this is as follows:<p><p> location /foo {<p><p>     set $a 12; # create and initialize $a<p><p>     set $b ''; # create and initialize $b<p><p>     rewrite_by_lua '<p><p>         ngx.var.b = tonumber(ngx.var.a) + 1<p><p>         if tonumber(ngx.var.b) == 13 then<p><p>             return ngx.redirect(\"/bar\");<p><p>         end<p><p>     ';<p><p>     echo \"res = $b\";<p><p> }<p><p>Note that the ngx_eval module can be approximated by using rewrite_by_lua. For example,<p><p> location / {<p><p>     eval $res {<p><p>         proxy_pass http://foo.com/check-spam;<p><p>     }<p><p>     if ($res = 'spam') {<p><p>         rewrite ^ /terms-of-use.html redirect;<p><p>     }<p><p>     fastcgi_pass ...;<p><p> }<p><p>can be implemented in ngx_lua as:<p><p> location = /check-spam {<p><p>     internal;<p><p>     proxy_pass http://foo.com/check-spam;<p><p> }<p><p> location / {<p><p>     rewrite_by_lua '<p><p>         local res = ngx.location.capture(\"/check-spam\")<p><p>         if res.body == \"spam\" then<p><p>             return ngx.redirect(\"/terms-of-use.html\")<p><p>         end<p><p>     ';<p><p>     fastcgi_pass ...;<p><p> }<p><p>Just as any other rewrite phase handlers, rewrite_by_lua also runs in subrequests.<p><p>Note that when calling ngx.exit(ngx.OK) within a rewrite_by_lua handler, the nginx request processing control flow will still continue to the content handler. To terminate the current request from within a rewrite_by_lua handler, calling ngx.exit with status >= 200 (ngx.HTTP_OK) and status < 300 (ngx.HTTP_SPECIAL_RESPONSE) for successful quits and ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) (or its friends) for failures.<p><p>If the ngx_http_rewrite_module's rewrite directive is used to change the URI and initiate location re-lookups (internal redirections), then any rewrite_by_lua or rewrite_by_lua_file code sequences within the current location will not be executed. For example,<p><p> location /foo {<p><p>     rewrite ^ /bar;<p><p>     rewrite_by_lua 'ngx.exit(503)';<p><p> }<p><p> location /bar {<p><p>     ...<p><p> }<p><p>Here the Lua code ngx.exit(503) will never run. This will be the case if rewrite ^ /bar last is used as this will similarly initiate an internal redirection. If the break modifier is used instead, there will be no internal redirection and the rewrite_by_lua code will be executed.<p><p>The rewrite_by_lua code will always run at the end of the rewrite request-processing phase unless rewrite_by_lua_no_postpone is turned on.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#rewrite_by_lua",
		"name": "rewrite_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>rewrite_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>rewrite_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: rewrite tail<p><p> rewrite_by_lua_block {<p><p>     do_something(\"hello, world!\nhiya\n\")<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#rewrite_by_lua_block",
		"name": "rewrite_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>rewrite_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>rewrite_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Nginx variables can be used in the <path-to-lua-script-file> string to provide flexibility. This however carries some risks and is not ordinarily recommended.</p><p>phase: rewrite tail<p><p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.<p><p>When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching lua_code_cache off in nginx.conf to avoid reloading Nginx.<p><p>The rewrite_by_lua_file code will always run at the end of the rewrite request-processing phase unless rewrite_by_lua_no_postpone is turned on.<p><p>Nginx variables are supported in the file path for dynamic dispatch just as in content_by_lua_file.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#rewrite_by_lua_file",
		"name": "rewrite_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>access_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>access_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Acts as an access phase handler and executes Lua code string specified in <lua-script-str> for every request. The Lua code may make API calls and is executed as a new spawned coroutine in an independent global environment (i.e. a sandbox).</p><p>phase: access tail<p><p>Note that this handler always runs after the standard ngx_http_access_module. So the following will work as expected:<p><p> location / {<p><p>     deny    192.168.1.1;<p><p>     allow   192.168.1.0/24;<p><p>     allow   10.1.1.0/16;<p><p>     deny    all;<p><p>     access_by_lua '<p><p>         local res = ngx.location.capture(\"/mysql\", { ... })<p><p>         ...<p><p>     ';<p><p>     # proxy_pass/fastcgi_pass/...<p><p> }<p><p>That is, if a client IP address is in the blacklist, it will be denied before the MySQL query for more complex authentication is executed by access_by_lua.<p><p>Note that the ngx_auth_request module can be approximated by using access_by_lua:<p><p> location / {<p><p>     auth_request /auth;<p><p>     # proxy_pass/fastcgi_pass/postgres_pass/...<p><p> }<p><p>can be implemented in ngx_lua as:<p><p> location / {<p><p>     access_by_lua '<p><p>         local res = ngx.location.capture(\"/auth\")<p><p>         if res.status == ngx.HTTP_OK then<p><p>             return<p><p>         end<p><p>         if res.status == ngx.HTTP_FORBIDDEN then<p><p>             ngx.exit(res.status)<p><p>         end<p><p>         ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)<p><p>     ';<p><p>     # proxy_pass/fastcgi_pass/postgres_pass/...<p><p> }<p><p>As with other access phase handlers, access_by_lua will not run in subrequests.<p><p>Note that when calling ngx.exit(ngx.OK) within a access_by_lua handler, the nginx request processing control flow will still continue to the content handler. To terminate the current request from within a access_by_lua handler, calling ngx.exit with status >= 200 (ngx.HTTP_OK) and status < 300 (ngx.HTTP_SPECIAL_RESPONSE) for successful quits and ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) (or its friends) for failures.<p><p>Starting from the v0.9.20 release, you can use the access_by_lua_no_postpone directive to control when to run this handler inside the \"access\" request-processing phase of NGINX.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#access_by_lua",
		"name": "access_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>access_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>access_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: access tail<p><p> access_by_lua_block {<p><p>     do_something(\"hello, world!\nhiya\n\")<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#access_by_lua_block",
		"name": "access_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>access_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>access_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Nginx variables can be used in the <path-to-lua-script-file> string to provide flexibility. This however carries some risks and is not ordinarily recommended.</p><p>phase: access tail<p><p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.<p><p>When the Lua code cache is turned on (by default), the user code is loaded once at the first request and cached and the Nginx config must be reloaded each time the Lua source file is modified. The Lua code cache can be temporarily disabled during development by switching lua_code_cache off in nginx.conf to avoid repeatedly reloading Nginx.<p><p>Nginx variables are supported in the file path for dynamic dispatch just as in content_by_lua_file.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#access_by_lua_file",
		"name": "access_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>header_filter_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>header_filter_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Uses Lua code specified in <lua-script-str> to define an output header filter.</p><p>phase: output-header-filter<p><p>Note that the following API functions are currently disabled within this context:<p><p>Output API functions (e.g., ngx.say and ngx.send_headers)<p><p>Control API functions (e.g., ngx.redirect and ngx.exec)<p><p>Subrequest API functions (e.g., ngx.location.capture and ngx.location.capture_multi)<p><p>Cosocket API functions (e.g., ngx.socket.tcp and ngx.req.socket).<p><p>Here is an example of overriding a response header (or adding one if absent) in our Lua header filter:<p><p> location / {<p><p>     proxy_pass http://mybackend;<p><p>     header_filter_by_lua 'ngx.header.Foo = \"blah\"';<p><p> }<p><p>This directive was first introduced in the v0.2.1rc20 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#header_filter_by_lua",
		"name": "header_filter_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>header_filter_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>header_filter_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: output-header-filter<p><p> header_filter_by_lua_block {<p><p>     ngx.header[\"content-length\"] = nil<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#header_filter_by_lua_block",
		"name": "header_filter_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>header_filter_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>header_filter_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: output-header-filter<p><p>This directive was first introduced in the v0.2.1rc20 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#header_filter_by_lua_file",
		"name": "header_filter_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>body_filter_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>body_filter_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Uses Lua code specified in <lua-script-str> to define an output body filter.</p><p>phase: output-body-filter<p><p>The input data chunk is passed via ngx.arg[1] (as a Lua string value) and the \"eof\" flag indicating the end of the response body data stream is passed via ngx.arg[2] (as a Lua boolean value).<p><p>Behind the scene, the \"eof\" flag is just the last_buf (for main requests) or last_in_chain (for subrequests) flag of the Nginx chain link buffers. (Before the v0.7.14 release, the \"eof\" flag does not work at all in subrequests.)<p><p>The output data stream can be aborted immediately by running the following Lua statement:<p><p> return ngx.ERROR<p><p>This will truncate the response body and usually result in incomplete and also invalid responses.<p><p>The Lua code can pass its own modified version of the input data chunk to the downstream Nginx output body filters by overriding ngx.arg[1] with a Lua string or a Lua table of strings. For example, to transform all the lowercase letters in the response body, we can just write:<p><p> location / {<p><p>     proxy_pass http://mybackend;<p><p>     body_filter_by_lua 'ngx.arg[1] = string.upper(ngx.arg[1])';<p><p> }<p><p>When setting nil or an empty Lua string value to ngx.arg[1], no data chunk will be passed to the downstream Nginx output filters at all.<p><p>Likewise, new \"eof\" flag can also be specified by setting a boolean value to ngx.arg[2]. For example,<p><p> location /t {<p><p>     echo hello world;<p><p>     echo hiya globe;<p><p>     body_filter_by_lua '<p><p>         local chunk = ngx.arg[1]<p><p>         if string.match(chunk, \"hello\") then<p><p>             ngx.arg[2] = true  -- new eof<p><p>             return<p><p>         end<p><p>         -- just throw away any remaining chunk data<p><p>         ngx.arg[1] = nil<p><p>     ';<p><p> }<p><p>Then GET /t will just return the output<p><p>hello world<p><p>That is, when the body filter sees a chunk containing the word \"hello\", then it will set the \"eof\" flag to true immediately, resulting in truncated but still valid responses.<p><p>When the Lua code may change the length of the response body, then it is required to always clear out the Content-Length response header (if any) in a header filter to enforce streaming output, as in<p><p> location /foo {<p><p>     # fastcgi_pass/proxy_pass/...<p><p>     header_filter_by_lua_block { ngx.header.content_length = nil }<p><p>     body_filter_by_lua 'ngx.arg[1] = string.len(ngx.arg[1]) .. \"\\n\"';<p><p> }<p><p>Note that the following API functions are currently disabled within this context due to the limitations in NGINX output filter's current implementation:<p><p>Output API functions (e.g., ngx.say and ngx.send_headers)<p><p>Control API functions (e.g., ngx.exit and ngx.exec)<p><p>Subrequest API functions (e.g., ngx.location.capture and ngx.location.capture_multi)<p><p>Cosocket API functions (e.g., ngx.socket.tcp and ngx.req.socket).<p><p>Nginx output filters may be called multiple times for a single request because response body may be delivered in chunks. Thus, the Lua code specified by in this directive may also run multiple times in the lifetime of a single HTTP request.<p><p>This directive was first introduced in the v0.5.0rc32 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#body_filter_by_lua",
		"name": "body_filter_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>body_filter_by_lua_block { lua-script-str };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>body_filter_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: output-body-filter<p><p> body_filter_by_lua_block {<p><p>     local data, eof = ngx.arg[1], ngx.arg[2]<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#body_filter_by_lua_block",
		"name": "body_filter_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>body_filter_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>body_filter_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: output-body-filter<p><p>This directive was first introduced in the v0.5.0rc32 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#body_filter_by_lua_file",
		"name": "body_filter_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>log_by_lua <lua-script-str>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>log_by_lua '';</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>Runs the Lua source code inlined as the <lua-script-str> at the log request processing phase. This does not replace the current access logs, but runs before.</p><p>phase: log<p><p>Note that the following API functions are currently disabled within this context:<p><p>Output API functions (e.g., ngx.say and ngx.send_headers)<p><p>Control API functions (e.g., ngx.exit)<p><p>Subrequest API functions (e.g., ngx.location.capture and ngx.location.capture_multi)<p><p>Cosocket API functions (e.g., ngx.socket.tcp and ngx.req.socket).<p><p>Here is an example of gathering average data for $upstream_response_time:<p><p> lua_shared_dict log_dict 5M;<p><p> server {<p><p>     location / {<p><p>         proxy_pass http://mybackend;<p><p>         log_by_lua '<p><p>             local log_dict = ngx.shared.log_dict<p><p>             local upstream_time = tonumber(ngx.var.upstream_response_time)<p><p>             local sum = log_dict:get(\"upstream_time-sum\") or 0<p><p>             sum = sum + upstream_time<p><p>             log_dict:set(\"upstream_time-sum\", sum)<p><p>             local newval, err = log_dict:incr(\"upstream_time-nb\", 1)<p><p>             if not newval and err == \"not found\" then<p><p>                 log_dict:add(\"upstream_time-nb\", 0)<p><p>                 log_dict:incr(\"upstream_time-nb\", 1)<p><p>             end<p><p>         ';<p><p>     }<p><p>     location = /status {<p><p>         content_by_lua_block {<p><p>             local log_dict = ngx.shared.log_dict<p><p>             local sum = log_dict:get(\"upstream_time-sum\")<p><p>             local nb = log_dict:get(\"upstream_time-nb\")<p><p>             if nb and sum then<p><p>                 ngx.say(\"average upstream response time: \", sum / nb,<p><p>                         \" (\", nb, \" reqs)\")<p><p>             else<p><p>                 ngx.say(\"no data yet\")<p><p>             end<p><p>         }<p><p>     }<p><p> }<p><p>This directive was first introduced in the v0.5.0rc31 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#log_by_lua",
		"name": "log_by_lua"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>log_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>log_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: log<p><p> log_by_lua_block {<p><p>     print(\"I need no extra escaping here, for example: \r\nblah\")<p><p> }<p><p>This directive was first introduced in the v0.9.17 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#log_by_lua_block",
		"name": "log_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>log_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>log_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: log<p><p>This directive was first introduced in the v0.5.0rc31 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#log_by_lua_file",
		"name": "log_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>balancer_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>balancer_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>upstream</code><br></td></tr></table>",
		"doc": "<p>For instance,</p><p>phase: content<p><p> upstream foo {<p><p>     server 127.0.0.1;<p><p>     balancer_by_lua_block {<p><p>         -- use Lua to do something interesting here<p><p>         -- as a dynamic balancer<p><p>     }<p><p> }<p><p> server {<p><p>     location / {<p><p>         proxy_pass http://foo;<p><p>     }<p><p> }<p><p>The resulting Lua load balancer can work with any existing nginx upstream modules like ngx_proxy and ngx_fastcgi.<p><p>Also, the Lua load balancer can work with the standard upstream connection pool mechanism, i.e., the standard keepalive directive. Just ensure that the keepalive directive is used after this balancer_by_lua_block directive in a single upstream {} configuration block.<p><p>The Lua load balancer can totally ignore the list of servers defined in the upstream {} block and select peer from a completely dynamic server list (even changing per request) via the ngx.balancer module from the lua-resty-core library.<p><p>The Lua code handler registered by this directive might get called more than once in a single downstream request when the nginx upstream mechanism retries the request on conditions specified by directives like the proxy_next_upstream directive.<p><p>This Lua code execution context does not support yielding, so Lua APIs that may yield (like cosockets and \"light threads\") are disabled in this context. One can usually work around this limitation by doing such operations in an earlier phase handler (like access_by_lua*) and passing along the result into this context via the ngx.ctx table.<p><p>This directive was first introduced in the v0.10.0 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#balancer_by_lua_block",
		"name": "balancer_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>balancer_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>balancer_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>upstream</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: content<p><p>This directive was first introduced in the v0.10.0 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#balancer_by_lua_file",
		"name": "balancer_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_need_request_body <on|off>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>off;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location if</code><br></td></tr></table>",
		"doc": "<p>phase: depends on usage</p><p>Determines whether to force the request body data to be read before running rewrite/access/access_by_lua* or not. The Nginx core does not read the client request body by default and if request body data is required, then this directive should be turned on or the ngx.req.read_body function should be called within the Lua code.<p><p>To read the request body data within the $request_body variable, client_body_buffer_size must have the same value as client_max_body_size. Because when the content length exceeds client_body_buffer_size but less than client_max_body_size, Nginx will buffer the data into a temporary file on the disk, which will lead to empty value in the $request_body variable.<p><p>If the current location includes rewrite_by_lua* directives, then the request body will be read just before the rewrite_by_lua* code is run (and also at the rewrite phase). Similarly, if only content_by_lua is specified, the request body will not be read until the content handler's Lua code is about to run (i.e., the request body will be read during the content phase).<p><p>It is recommended however, to use the ngx.req.read_body and ngx.req.discard_body functions for finer control over the request body reading process instead.<p><p>This also applies to access_by_lua*.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_need_request_body",
		"name": "lua_need_request_body"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>ssl_certificate_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>ssl_certificate_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>server</code><br></td></tr></table>",
		"doc": "<p>It is particularly useful for setting the SSL certificate chain and the corresponding private key on a per-request basis. It is also useful to load such handshake configurations nonblockingly from the remote (for example, with the cosocket API). And one can also do per-request OCSP stapling handling in pure Lua here as well.</p><p>phase: right-before-SSL-handshake<p><p>Another typical use case is to do SSL handshake traffic control nonblockingly in this context, with the help of the lua-resty-limit-traffic#readme library, for example.<p><p>One can also do interesting things with the SSL handshake requests from the client side, like rejecting old SSL clients using the SSLv3 protocol or even below selectively.<p><p>The ngx.ssl and ngx.ocsp Lua modules provided by the lua-resty-core library are particularly useful in this context. You can use the Lua API offered by these two Lua modules to manipulate the SSL certificate chain and private key for the current SSL connection being initiated.<p><p>This Lua handler does not run at all, however, when NGINX/OpenSSL successfully resumes the SSL session via SSL session IDs or TLS session tickets for the current SSL connection. In other words, this Lua handler only runs when NGINX has to initiate a full SSL handshake.<p><p>Below is a trivial example using the ngx.ssl module at the same time:<p><p> server {<p><p>     listen 443 ssl;<p><p>     server_name   test.com;<p><p>     ssl_certificate_by_lua_block {<p><p>         print(\"About to initiate a new SSL handshake!\")<p><p>     }<p><p>     location / {<p><p>         root html;<p><p>     }<p><p> }<p><p>See more complicated examples in the ngx.ssl and ngx.ocsp Lua modules' official documentation.<p><p>Uncaught Lua exceptions in the user Lua code immediately abort the current SSL session, so does the ngx.exit call with an error code like ngx.ERROR.<p><p>This Lua code execution context does support yielding, so Lua APIs that may yield (like cosockets, sleeping, and \"light threads\") are enabled in this context.<p><p>Note, however, you still need to configure the ssl_certificate and ssl_certificate_key directives even though you will not use this static certificate and private key at all. This is because the NGINX core requires their appearance otherwise you are seeing the following error while starting NGINX:<p><p>nginx: [emerg] no ssl configured for the server<p><p>This directive currently requires the following NGINX core patch to work correctly:<p><p>http://mailman.nginx.org/pipermail/nginx-devel/2016-January/007748.html<p><p>The bundled version of the NGINX core in OpenResty 1.9.7.2 (or above) already has this patch applied.<p><p>Furthermore, one needs at least OpenSSL 1.0.2e for this directive to work.<p><p>This directive was first introduced in the v0.10.0 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#ssl_certificate_by_lua_block",
		"name": "ssl_certificate_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>ssl_certificate_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>ssl_certificate_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>server</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: right-before-SSL-handshake<p><p>This directive was first introduced in the v0.10.0 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#ssl_certificate_by_lua_file",
		"name": "ssl_certificate_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>ssl_session_fetch_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>ssl_session_fetch_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>The Lua API for obtaining the current session ID and loading a cached SSL session data is provided in the ngx.ssl.session Lua module shipped with the lua-resty-core library.</p><p>phase: right-before-SSL-handshake<p><p>Lua APIs that may yield, like ngx.sleep and cosockets, are enabled in this context.<p><p>This hook, together with the ssl_session_store_by_lua* hook, can be used to implement distributed caching mechanisms in pure Lua (based on the cosocket API, for example). If a cached SSL session is found and loaded into the current SSL connection context, SSL session resumption can then get immediately initiated and bypass the full SSL handshake process which is very expensive in terms of CPU time.<p><p>Please note that TLS session tickets are very different and it is the clients' responsibility to cache the SSL session state when session tickets are used. SSL session resumptions based on TLS session tickets would happen automatically without going through this hook (nor the ssl_session_store_by_lua* hook). This hook is mainly for older or less capable SSL clients that can only do SSL sessions by session IDs.<p><p>When ssl_certificate_by_lua* is specified at the same time, this hook usually runs before ssl_certificate_by_lua*. When the SSL session is found and successfully loaded for the current SSL connection, SSL session resumption will happen and thus bypass the ssl_certificate_by_lua* hook completely. In this case, NGINX also bypasses the ssl_session_store_by_lua* hook, for obvious reasons.<p><p>To easily test this hook locally with a modern web browser, you can temporarily put the following line in your https server block to disable the TLS session ticket support:<p><p>ssl_session_tickets off;<p><p>But do not forget to comment this line out before publishing your site to the world.<p><p>If you are using the official pre-built packages for OpenResty 1.11.2.1 or later, then everything should work out of the box.<p><p>If you are using OpenSSL libraries not provided by OpenResty, then you need to apply the following patch for OpenSSL 1.0.2h or later:<p><p>https://github.com/openresty/openresty/blob/master/patches/openssl-1.0.2h-sess_set_get_cb_yield.patch<p><p>If you are not using the NGINX core shipped with OpenResty 1.11.2.1 or later, then you need to apply the following patch to the standard NGINX core 1.11.2 or later:<p><p>http://openresty.org/download/nginx-1.11.2-nonblocking_ssl_handshake_hooks.patch<p><p>This directive was first introduced in the v0.10.6 release.<p><p>Note that: this directive is only allowed to used in http context from the v0.10.7 release (because SSL session resumption happens before server name dispatch).<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#ssl_session_fetch_by_lua_block",
		"name": "ssl_session_fetch_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>ssl_session_fetch_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>ssl_session_fetch_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: right-before-SSL-handshake<p><p>This directive was first introduced in the v0.10.6 release.<p><p>Note that: this directive is only allowed to used in http context from the v0.10.7 release (because SSL session resumption happens before server name dispatch).<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#ssl_session_fetch_by_lua_file",
		"name": "ssl_session_fetch_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>ssl_session_store_by_lua_block { lua-script };</strong></code><br></td></tr><tr><th>Default:</th><td><pre>ssl_session_store_by_lua_block {};</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Lua APIs that may yield, like ngx.sleep and cosockets, are disabled in this context. You can still, however, use the ngx.timer.at API to create 0-delay timers to save the SSL session data asynchronously to external services (like redis or memcached).</p><p>phase: right-after-SSL-handshake<p><p>The Lua API for obtaining the current session ID and the associated session state data is provided in the ngx.ssl.session Lua module shipped with the lua-resty-core library.<p><p>To easily test this hook locally with a modern web browser, you can temporarily put the following line in your https server block to disable the TLS session ticket support:<p><p>ssl_session_tickets off;<p><p>But do not forget to comment this line out before publishing your site to the world.<p><p>This directive was first introduced in the v0.10.6 release.<p><p>Note that: this directive is only allowed to used in http context from the v0.10.7 release (because SSL session resumption happens before server name dispatch).<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#ssl_session_store_by_lua_block",
		"name": "ssl_session_store_by_lua_block"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>ssl_session_store_by_lua_file <path-to-lua-script-file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>ssl_session_store_by_lua_file .lua;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>When a relative path like foo/bar.lua is given, they will be turned into the absolute path relative to the server prefix path determined by the -p PATH command-line option while starting the Nginx server.</p><p>phase: right-after-SSL-handshake<p><p>This directive was first introduced in the v0.10.6 release.<p><p>Note that: this directive is only allowed to used in http context from the v0.10.7 release (because SSL session resumption happens before server name dispatch).<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#ssl_session_store_by_lua_file",
		"name": "ssl_session_store_by_lua_file"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_shared_dict <name> <size>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_shared_dict $name $size;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>phase: depends on usage</p><p>Declares a shared memory zone, <name>, to serve as storage for the shm based Lua dictionary ngx.shared.<name>.<p><p>Shared memory zones are always shared by all the nginx worker processes in the current nginx server instance.<p><p>The <size> argument accepts size units such as k and m:<p><p> http {<p><p>     lua_shared_dict dogs 10m;<p><p>     ...<p><p> }<p><p>The hard-coded minimum size is 8KB while the practical minimum size depends on actual user data set (some people start with 12KB).<p><p>See ngx.shared.DICT for details.<p><p>This directive was first introduced in the v0.3.1rc22 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_shared_dict",
		"name": "lua_shared_dict"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_connect_timeout <time>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_connect_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>This directive controls the default timeout value used in TCP/unix-domain socket object's connect method and can be overridden by the settimeout or settimeouts methods.</p><p>The <time> argument can be an integer, with an optional time unit, like s (second), ms (millisecond), m (minute). The default time unit is s, i.e., \"second\". The default setting is 60s.<p><p>This directive was first introduced in the v0.5.0rc1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_connect_timeout",
		"name": "lua_socket_connect_timeout"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_send_timeout <time>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_send_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Controls the default timeout value used in TCP/unix-domain socket object's send method and can be overridden by the settimeout or settimeouts methods.</p><p>The <time> argument can be an integer, with an optional time unit, like s (second), ms (millisecond), m (minute). The default time unit is s, i.e., \"second\". The default setting is 60s.<p><p>This directive was first introduced in the v0.5.0rc1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_send_timeout",
		"name": "lua_socket_send_timeout"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_send_lowat <size>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_send_lowat 0;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Controls the lowat (low water) value for the cosocket send buffer.</p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_send_lowat",
		"name": "lua_socket_send_lowat"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_read_timeout <time>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_read_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>phase: depends on usage</p><p>This directive controls the default timeout value used in TCP/unix-domain socket object's receive method and iterator functions returned by the receiveuntil method. This setting can be overridden by the settimeout or settimeouts methods.<p><p>The <time> argument can be an integer, with an optional time unit, like s (second), ms (millisecond), m (minute). The default time unit is s, i.e., \"second\". The default setting is 60s.<p><p>This directive was first introduced in the v0.5.0rc1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_read_timeout",
		"name": "lua_socket_read_timeout"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_buffer_size <size>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_buffer_size 4k/8k;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Specifies the buffer size used by cosocket reading operations.</p><p>This buffer does not have to be that big to hold everything at the same time because cosocket supports 100% non-buffered reading and parsing. So even 1 byte buffer size should still work everywhere but the performance could be terrible.<p><p>This directive was first introduced in the v0.5.0rc1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_buffer_size",
		"name": "lua_socket_buffer_size"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_pool_size <size>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_pool_size 30;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Specifies the size limit (in terms of connection count) for every cosocket connection pool associated with every remote server (i.e., identified by either the host-port pair or the unix domain socket file path).</p><p>Default to 30 connections for every pool.<p><p>When the connection pool exceeds the available size limit, the least recently used (idle) connection already in the pool will be closed to make room for the current connection.<p><p>Note that the cosocket connection pool is per nginx worker process rather than per nginx server instance, so size limit specified here also applies to every single nginx worker process.<p><p>This directive was first introduced in the v0.5.0rc1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_pool_size",
		"name": "lua_socket_pool_size"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_keepalive_timeout <time>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_keepalive_timeout 60s;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>This directive controls the default maximal idle time of the connections in the cosocket built-in connection pool. When this timeout reaches, idle connections will be closed and removed from the pool. This setting can be overridden by cosocket objects' setkeepalive method.</p><p>The <time> argument can be an integer, with an optional time unit, like s (second), ms (millisecond), m (minute). The default time unit is s, i.e., \"second\". The default setting is 60s.<p><p>This directive was first introduced in the v0.5.0rc1 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_keepalive_timeout",
		"name": "lua_socket_keepalive_timeout"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_socket_log_errors on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_socket_log_errors on;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>This directive can be used to toggle error logging when a failure occurs for the TCP or UDP cosockets. If you are already doing proper error handling and logging in your Lua code, then it is recommended to turn this directive off to prevent data flushing in your nginx error log files (which is usually rather expensive).</p><p>This directive was first introduced in the v0.5.13 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_socket_log_errors",
		"name": "lua_socket_log_errors"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_ssl_ciphers <ciphers>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_ssl_ciphers DEFAULT;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Specifies the enabled ciphers for requests to a SSL/TLS server in the tcpsock:sslhandshake method. The ciphers are specified in the format understood by the OpenSSL library.</p><p>The full list can be viewed using the “openssl ciphers” command.<p><p>This directive was first introduced in the v0.9.11 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_ssl_ciphers",
		"name": "lua_ssl_ciphers"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_ssl_crl <file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_ssl_crl $file;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Specifies a file with revoked certificates (CRL) in the PEM format used to verify the certificate of the SSL/TLS server in the tcpsock:sslhandshake method.</p><p>This directive was first introduced in the v0.9.11 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_ssl_crl",
		"name": "lua_ssl_crl"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2] [TLSv1.3];</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Enables the specified protocols for requests to a SSL/TLS server in the tcpsock:sslhandshake method.</p><p>The support for the TLSv1.3 parameter requires version v0.10.12 and OpenSSL 1.1.1.<p><p>This directive was first introduced in the v0.9.11 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_ssl_protocols",
		"name": "lua_ssl_protocols"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_ssl_trusted_certificate <file>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>no;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Specifies a file path with trusted CA certificates in the PEM format used to verify the certificate of the SSL/TLS server in the tcpsock:sslhandshake method.</p><p>This directive was first introduced in the v0.9.11 release.<p><p>See also lua_ssl_verify_depth.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_ssl_trusted_certificate",
		"name": "lua_ssl_trusted_certificate"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_ssl_verify_depth <number>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_ssl_verify_depth 1;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location</code><br></td></tr></table>",
		"doc": "<p>Sets the verification depth in the server certificates chain.</p><p>This directive was first introduced in the v0.9.11 release.<p><p>See also lua_ssl_trusted_certificate.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_ssl_verify_depth",
		"name": "lua_ssl_verify_depth"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_http10_buffering on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_http10_buffering on;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location-if</code><br></td></tr></table>",
		"doc": "<p>Enables or disables automatic response buffering for HTTP 1.0 (or older) requests. This buffering mechanism is mainly used for HTTP 1.0 keep-alive which relies on a proper Content-Length response header.</p><p>If the Lua code explicitly sets a Content-Length response header before sending the headers (either explicitly via ngx.send_headers or implicitly via the first ngx.say or ngx.print call), then the HTTP 1.0 response buffering will be disabled even when this directive is turned on.<p><p>To output very large response data in a streaming fashion (via the ngx.flush call, for example), this directive MUST be turned off to minimize memory usage.<p><p>This directive is turned on by default.<p><p>This directive was first introduced in the v0.5.0rc19 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_http10_buffering",
		"name": "lua_http10_buffering"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>rewrite_by_lua_no_postpone on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>rewrite_by_lua_no_postpone off;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Controls whether or not to disable postponing rewrite_by_lua* directives to run at the end of the rewrite request-processing phase. By default, this directive is turned off and the Lua code is postponed to run at the end of the rewrite phase.</p><p>This directive was first introduced in the v0.5.0rc29 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#rewrite_by_lua_no_postpone",
		"name": "rewrite_by_lua_no_postpone"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>access_by_lua_no_postpone on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>access_by_lua_no_postpone off;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Controls whether or not to disable postponing access_by_lua* directives to run at the end of the access request-processing phase. By default, this directive is turned off and the Lua code is postponed to run at the end of the access phase.</p><p>This directive was first introduced in the v0.9.20 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#access_by_lua_no_postpone",
		"name": "access_by_lua_no_postpone"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_transform_underscores_in_response_headers on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_transform_underscores_in_response_headers on;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location-if</code><br></td></tr></table>",
		"doc": "<p>Controls whether to transform underscores (_) in the response header names specified in the ngx.header.HEADER API to hypens (-).</p><p>This directive was first introduced in the v0.5.0rc32 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_transform_underscores_in_response_headers",
		"name": "lua_transform_underscores_in_response_headers"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_check_client_abort on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_check_client_abort off;</pre></td></tr><tr><th>Context:</th><td><code>http,server,location,location-if</code><br></td></tr></table>",
		"doc": "<p>This directive controls whether to check for premature client connection abortion.</p><p>When this directive is on, the ngx_lua module will monitor the premature connection close event on the downstream connections and when there is such an event, it will call the user Lua function callback (registered by ngx.on_abort) or just stop and clean up all the Lua \"light threads\" running in the current request's request handler when there is no user callback function registered.<p><p>According to the current implementation, however, if the client closes the connection before the Lua code finishes reading the request body data via ngx.req.socket, then ngx_lua will neither stop all the running \"light threads\" nor call the user callback (if ngx.on_abort has been called). Instead, the reading operation on ngx.req.socket will just return the error message \"client aborted\" as the second return value (the first return value is surely nil).<p><p>When TCP keepalive is disabled, it is relying on the client side to close the socket gracefully (by sending a FIN packet or something like that). For (soft) real-time web applications, it is highly recommended to configure the TCP keepalive support in your system's TCP stack implementation in order to detect \"half-open\" TCP connections in time.<p><p>For example, on Linux, you can configure the standard listen directive in your nginx.conf file like this:<p><p> listen 80 so_keepalive=2s:2s:8;<p><p>On FreeBSD, you can only tune the system-wide configuration for TCP keepalive, for example:<p><p># sysctl net.inet.tcp.keepintvl=2000<p><p># sysctl net.inet.tcp.keepidle=2000<p><p>This directive was first introduced in the v0.7.4 release.<p><p>See also ngx.on_abort.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_check_client_abort",
		"name": "lua_check_client_abort"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_max_pending_timers <count>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_max_pending_timers 1024;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Controls the maximum number of pending timers allowed.</p><p>Pending timers are those timers that have not expired yet.<p><p>When exceeding this limit, the ngx.timer.at call will immediately return nil and the error string \"too many pending timers\".<p><p>This directive was first introduced in the v0.8.0 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_max_pending_timers",
		"name": "lua_max_pending_timers"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_max_running_timers <count>;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_max_running_timers 256;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>Controls the maximum number of \"running timers\" allowed.</p><p>Running timers are those timers whose user callback functions are still running.<p><p>When exceeding this limit, Nginx will stop running the callbacks of newly expired timers and log an error message \"N lua_max_running_timers are not enough\" where \"N\" is the current value of this directive.<p><p>This directive was first introduced in the v0.8.0 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_max_running_timers",
		"name": "lua_max_running_timers"
	},
	{
		"table": "<table ><tr><th>Syntax:</th><td><code><strong>lua_sa_restart on|off;</strong></code><br></td></tr><tr><th>Default:</th><td><pre>lua_sa_restart on;</pre></td></tr><tr><th>Context:</th><td><code>http</code><br></td></tr></table>",
		"doc": "<p>When enabled, this module will set the SA_RESTART flag on nginx workers signal dispositions.</p><p>This allows Lua I/O primitives to not be interrupted by nginx's handling of various signals.<p><p>This directive was first introduced in the v0.10.14 release.<p>",
		"module": "lua-nginx-module",
		"link": "https://github.com/openresty/lua-nginx-module#lua_sa_restart",
		"name": "lua_sa_restart"
	}
]
